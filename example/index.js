// Generated by BUCKLESCRIPT VERSION 1.6.0, PLEASE EDIT WITH CARE
'use strict';

var Curry     = require("bs-platform/lib/js/curry");
var Express   = require("../src/express");
var Js_json   = require("bs-platform/lib/js/js_json");
var Express$1 = require("express");
var Caml_obj  = require("bs-platform/lib/js/caml_obj");

function check_property(req, next, property, k) {
  var match = req[property];
  if (match !== undefined) {
    var match$1 = Js_json.decodeBoolean(match);
    if (match$1) {
      if (Caml_obj.caml_equal(match$1[0], true)) {
        return Curry._1(k, /* () */0);
      } else {
        return Curry._1(next, Express.Next[/* route */1]);
      }
    } else {
      return Curry._1(next, Express.Next[/* route */1]);
    }
  } else {
    return Curry._1(next, Express.Next[/* route */1]);
  }
}

function check_properties(req, next, properties, k) {
  var aux = function (properties) {
    if (properties) {
      var tl = properties[1];
      return check_property(req, next, properties[0], function () {
                  return aux(tl);
                });
    } else {
      return Curry._1(k, /* () */0);
    }
  };
  return aux(properties);
}

function send_success_json(res) {
  var json = { };
  json["success"] = true;
  return res.send(json);
}

function set_property(req, property) {
  req[property] = true;
  return /* () */0;
}

var app = Express.express(/* () */0);

app.use("/", function (req, _, next) {
      set_property(req, "middleware0");
      return Curry._1(next, Express.Next[/* middleware */0]);
    });

app.use(/* array */[
      function (req, _, next) {
        return check_property(req, next, "middleware0", function () {
                    set_property(req, "middleware1");
                    return Curry._1(next, Express.Next[/* middleware */0]);
                  });
      },
      function (req, _, next) {
        return check_properties(req, next, /* :: */[
                    "middleware0",
                    /* :: */[
                      "middleware1",
                      /* [] */0
                    ]
                  ], function () {
                    set_property(req, "middleware2");
                    return Curry._1(next, Express.Next[/* middleware */0]);
                  });
      }
    ]);

app.get("/", function (req, res, next) {
      return check_properties(req, next, /* :: */[
                  "middleware0",
                  /* :: */[
                    "middleware1",
                    /* :: */[
                      "middleware2",
                      /* [] */0
                    ]
                  ]
                ], function () {
                  return send_success_json(res);
                });
    });

var options = Curry._1(Express.Static[/* defaultOptions */0], /* () */0);

app.use("/static", Express$1.static("static", options));

app.post("/:id/id", /* array */[function (req, res, next) {
        return check_properties(req, next, /* :: */[
                    "middleware0",
                    /* :: */[
                      "middleware1",
                      /* :: */[
                        "middleware2",
                        /* [] */0
                      ]
                    ]
                  ], function () {
                    var match = req.params["id"];
                    if (match !== undefined) {
                      var match$1 = Js_json.decodeString(match);
                      if (match$1) {
                        if (match$1[0] === "123") {
                          return send_success_json(res);
                        } else {
                          return Curry._1(next, Express.Next[/* route */1]);
                        }
                      } else {
                        return Curry._1(next, Express.Next[/* route */1]);
                      }
                    } else {
                      return Curry._1(next, Express.Next[/* route */1]);
                    }
                  });
      }]);

app.listen(3000);

exports.check_property    = check_property;
exports.check_properties  = check_properties;
exports.send_success_json = send_success_json;
exports.set_property      = set_property;
exports.app               = app;
/* app Not a pure module */
